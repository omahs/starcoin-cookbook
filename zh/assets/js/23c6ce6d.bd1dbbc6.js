"use strict";(self.webpackChunkstarcoin_cookbook=self.webpackChunkstarcoin_cookbook||[]).push([[4735],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),i=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=i(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=i(t),d=o,k=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return t?a.createElement(k,s(s({ref:n},u),{},{components:t})):a.createElement(k,s({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var i=2;i<r;i++)s[i]=t[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2522:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return i}});var a=t(3117),o=(t(7294),t(3905));const r={},s="StarcoinReact \u6700\u5feb\u901f\u6307\u5357",c={unversionedId:"web3/starcoin-react-stepby",id:"web3/starcoin-react-stepby",title:"StarcoinReact \u6700\u5feb\u901f\u6307\u5357",description:"\u4e00\u5c0f\u65f6\u5e26\u4f60\u4ece\u5165\u95e8\u5230\u8fdb\u9636",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/04-web3/07-starcoin-react-stepby.md",sourceDirName:"04-web3",slug:"/web3/starcoin-react-stepby",permalink:"/zh/docs/web3/starcoin-react-stepby",draft:!1,editUrl:"https://github.com/starcoinorg/starcoin-cookbook/edit/main/i18n/zh/docusaurus-plugin-content-docs/current/04-web3/07-starcoin-react-stepby.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interaction with the chain by RPC and SDK",permalink:"/zh/docs/web3/interacting-with-the-chain"},next:{title:"\u53c2\u8003",permalink:"/zh/docs/reference/"}},l={},i=[{value:"\u51c6\u5907\u6761\u4ef6",id:"\u51c6\u5907\u6761\u4ef6",level:2},{value:"\u7b2c\u4e00\u6b65 - \u57fa\u7840",id:"\u7b2c\u4e00\u6b65---\u57fa\u7840",level:2},{value:"\u4e0b\u8f7d starmask \u94b1\u5305",id:"\u4e0b\u8f7d-starmask-\u94b1\u5305",level:3},{value:"\u9886\u53d6\u6d4b\u8bd5\u4ee3\u5e01",id:"\u9886\u53d6\u6d4b\u8bd5\u4ee3\u5e01",level:3},{value:"\u7b2c\u4e8c\u6b65 - DApp \u524d\u7aef",id:"\u7b2c\u4e8c\u6b65---dapp-\u524d\u7aef",level:2},{value:"\u521d\u59cb\u5316\u9879\u76ee",id:"\u521d\u59cb\u5316\u9879\u76ee",level:3},{value:"\u7b2c\u4e09\u6b65 - \u5408\u7ea6\u901a\u4fe1",id:"\u7b2c\u4e09\u6b65---\u5408\u7ea6\u901a\u4fe1",level:2},{value:"NFT",id:"nft",level:3},{value:"\u7b2c\u56db\u6b65 - \u5408\u7ea6",id:"\u7b2c\u56db\u6b65---\u5408\u7ea6",level:2},{value:"\u5408\u7ea6\u9879\u76ee",id:"\u5408\u7ea6\u9879\u76ee",level:3},{value:"\u8c03\u5408\u7ea6",id:"\u8c03\u5408\u7ea6",level:3},{value:"\u7b2c\u4e94\u6b65 - Game \u8fdb\u9636",id:"\u7b2c\u4e94\u6b65---game-\u8fdb\u9636",level:2},{value:"\u7b2c\u516d\u6b65 - \u6d4b\u8bd5\u7528\u4f8b",id:"\u7b2c\u516d\u6b65---\u6d4b\u8bd5\u7528\u4f8b",level:2},{value:"\u518d\u7cbe\u8fdb\u8ba1\u5212",id:"\u518d\u7cbe\u8fdb\u8ba1\u5212",level:2}],u={toc:i};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"starcoinreact-\u6700\u5feb\u901f\u6307\u5357"},"StarcoinReact \u6700\u5feb\u901f\u6307\u5357"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u4e00\u5c0f\u65f6\u5e26\u4f60\u4ece\u5165\u95e8\u5230\u8fdb\u9636")),(0,o.kt)("h2",{id:"\u51c6\u5907\u6761\u4ef6"},"\u51c6\u5907\u6761\u4ef6"),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u6709\u7f16\u7a0b\u7ecf\u9a8c\u5c31\u591f\u4e86\uff0c\u5982\u679c\u4f60\u6709 React\uff0cRust\uff0cMove \u7ecf\u9a8c\u4f1a\u66f4\u597d\u3002\u7f16\u7a0b\u662f\u95e8\u5b9e\u8df5\u7684\u624b\u827a\uff0c\u5173\u952e\u5728\u884c\u52a8\u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e00\u6b65---\u57fa\u7840"},"\u7b2c\u4e00\u6b65 - \u57fa\u7840"),(0,o.kt)("h3",{id:"\u4e0b\u8f7d-starmask-\u94b1\u5305"},"\u4e0b\u8f7d starmask \u94b1\u5305"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://starcoin.org/zh/individual/#wallets"},"https://starcoin.org/zh/individual/#wallets")),(0,o.kt)("p",null,"\u73b0\u5728\u94b1\u5305\u662f\u8fdb\u5165\u533a\u5757\u94fe\u7684\u94a5\u5319\uff0c\u6240\u4ee5\u51c6\u5907\u4e00\u4e2a\u94b1\u5305\u662f\u5fc5\u987b\u7684\u3002\u6211\u4eec\u8981\u4f7f\u7528 starcoin \uff0c\u90a3\u4e48\u5c31\u8981\u7528 starcoin \u7684\u94b1\u5305\u3002\u6839\u636e\u94b1\u5305\u5411\u5bfc\uff0c\u4f7f\u7528\u52a9\u8bb0\u8bcd\u8fdb\u5165\u94b1\u5305\u3002\u7136\u540e\u5207\u6362\u7f51\u7edc\u5230 barnard \u6d4b\u8bd5\u7f51\u7edc\u3002\u5728\u6d4b\u8bd5\u7f51\u7edc\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u514d\u8d39\u7684\u9886\u53d6\u4ee3\u5e01\u3002"),(0,o.kt)("h3",{id:"\u9886\u53d6\u6d4b\u8bd5\u4ee3\u5e01"},"\u9886\u53d6\u6d4b\u8bd5\u4ee3\u5e01"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://faucet.starcoin.org/barnard"},"https://faucet.starcoin.org/barnard")),(0,o.kt)("p",null,"\u94b1\u5305\u4e0b\u8f7d\u597d\u540e\uff0c\u53bb\u8fd9\u4e2a\u5730\u5740\u9886\u53d6\u6d4b\u8bd5\u5e01\u3002\u9886\u53d6\u540e\uff0c\u5927\u7ea6 5 \u79d2\u5c31\u4f1a\u5728\u94b1\u5305\u91cc\u663e\u793a\u9886\u53d6\u5230\u7684 STC\u3002\u73b0\u5728\u53ef\u4ee5\u5728\u94b1\u5305\u91cc\u589e\u52a0\u4e00\u4e2a\u8d26\u6237\uff0c\u7136\u540e\u5728\u81ea\u5df1\u7684\u4e24\u4e2a\u8d26\u6237\u4e0a\u8f6c\u4e00\u4e0b\u5e10\u3002\u5bf9\u533a\u5757\u94fe\u505a\u4e00\u4e2a\u611f\u6027\u8ba4\u8bc6\u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e8c\u6b65---dapp-\u524d\u7aef"},"\u7b2c\u4e8c\u6b65 - DApp \u524d\u7aef"),(0,o.kt)("p",null,"\u6211\u4eec\u5148\u4ece\u524d\u7aef\u5f00\u59cb\uff0c\u5148\u7528 JS \u80fd\u591f\u83b7\u53d6\u8d26\u6237\uff0c\u4f59\u989d\uff0c\u7b7e\u540d\u7b49\u3002"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"\u5410\u69fd: \u5b98\u7f51\u7684\u5c55\u793a\u7684\u4ee3\u7801 ",(0,o.kt)("a",{parentName:"em",href:"https://starcoin.org/zh/developer/sdk/javascript/usersguide/gettingstarted/"},"https://starcoin.org/zh/developer/sdk/javascript/usersguide/gettingstarted/")," \u90a3\u4e2a\u7b2c 3 \u6b65\uff0c\u5f88\u660e\u663e\u6ca1\u6709\u5b58\u5728\u7684\u5fc5\u8981\u3002\u5982\u679c\u68c0\u67e5\u6709\u6ca1\u6709\u5b89\u88c5\uff0c\u770b window \u4e0b \u6709\u6ca1\u6709 starcoin \u5373\u53ef ",(0,o.kt)("inlineCode",{parentName:"em"},"(window as any).starcoin"),"\u3002\u68c0\u67e5\u6ca1\u6709\u5b89\u88c5\u540e\u8df3 Chrome App Store \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u660e\u767d\u8fd9\u4e2a\u5305\u8fd8\u6709\u4ec0\u4e48\u7528\u3002")),(0,o.kt)("h3",{id:"\u521d\u59cb\u5316\u9879\u76ee"},"\u521d\u59cb\u5316\u9879\u76ee"),(0,o.kt)("p",null,"\u4f7f\u7528 JS \u8c03\u7528\u94b1\u5305\u57fa\u7840\u529f\u80fd"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"yarn create react-app starcoin-dapp --template typescript ")),(0,o.kt)("p",null,"\u56e0\u4e3a CRA \u7528\u7684 webpack 5\uff0cwebpack 5 \u79fb\u9664\u4e86\u4e00\u4e9b polyfill\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5df1\u5728\u60f3\u529e\u6cd5\u52a0\u5165\u3002",(0,o.kt)("inlineCode",{parentName:"p"},"react-app-rewired")," \u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\uff0c\u5177\u4f53\u53ef\u89c1\u4ed3\u5e93 ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"\u3002"),(0,o.kt)("p",null,"\u6284\u4e86\u4f1a\u5b98\u65b9\u4ee3\u7801\uff0c\u611f\u89c9\u548c eth \u5341\u5206\u50cf\uff0c\u6240\u4ee5\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539\u3002"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u521d\u59cb\u5316 starcoinProvider")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// App.tsx\n...\nlet starcoinProvider = new providers.Web3Provider(\n    (window as any).starcoin,\n    "any"\n  );\n  starcoinProvider.on("network", (newNetwork, oldNetwork) => {\n    // When a Provider makes its initial connection, it emits a "network"\n    // event with a null oldNetwork along with the newNetwork. So, if the\n    // oldNetwork exists, it represents a changing network\n    console.log({ newNetwork, oldNetwork });\n    if (oldNetwork) {\n      console.log("reload");\n      window.location.reload();\n    }\n  });\n')),(0,o.kt)("p",null,"\u8fd9\u4e2a starcoinProvider \u5176\u5b9e\u5c31\u662f\u5bf9 ",(0,o.kt)("inlineCode",{parentName:"p"},"(window as any).starcoin")," \u5305\u88c5\uff0c\u4e3a\u65b9\u4fbf\u5199\u7a0b\u5e8f\u3002"),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"\u7528 ",(0,o.kt)("inlineCode",{parentName:"li"},"starcoinProvider")," \u83b7\u53d6\u94b1\u5305\u8d26\u6237\u7684\u516c\u5f00\u4fe1\u606f\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// App.tsx\n...\n  const onClickConnect = async () => {\n    try {\n      // const newAccounts = await (window as any).starcoin.request({\n      //   method: "stc_requestAccounts",\n      // });\n      // console.log(newAccounts);\n      // handleNewAccounts(newAccounts)\n      const network = await starcoinProvider.getNetwork();\n      console.log(network);\n      const result = await starcoinProvider.send("stc_requestAccounts", []);\n      console.log(result);\n      console.log(BigInt(10 ** 9));\n      let balance = await starcoinProvider.getBalance(result[0]);\n      if (balance)\n        console.log(\n          { balance },\n          (BigInt(balance.valueOf()) / BigInt(10 ** 9)).toString()\n        );\n      const blockNumber = await starcoinProvider.getBlockNumber();\n      console.log({ blockNumber });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n')),(0,o.kt)("p",null,"\u8fd9\u6837\u5c31\u83b7\u53d6\u4e86\u94b1\u5305\u7684\u5730\u5740\uff0c\u548c\u94b1\u5305\u7684\u4f59\u989d\u3002"),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"li"},"starcoinProvider")," \u8fdb\u884c msg \u7b7e\u540d")),(0,o.kt)("p",null,"\u73b0\u5728\u5f88\u591a web3 \u7f51\u7ad9\u90fd\u662f\u7528\u94b1\u5305\u7b7e\u540d\u7684\u65b9\u5f0f\u8fdb\u884c\u7528\u6237\u767b\u9646\uff0c\u5176\u4f7f\u7528\u5230\u7684\u4e3b\u8981\u5c31\u662f msg \u7b7e\u540d\u7b7e\u540d\u529f\u80fd\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// App.tsx\n...\n  const personalSign = async () => {\n    const exampleMessage = "Example `personal_sign` message \u4e2d\u6587";\n    try {\n      // personalSignResult.innerHTML = \'\'\n      // personalSignVerify.disabled = false\n      // personalSignRecoverResult.innerHTML = \'\'\n      const result = await starcoinProvider.send("stc_requestAccounts", []);\n      const from = result[0];\n      const msg = `0x${Buffer.from(exampleMessage, "utf8").toString("hex")}`;\n      // console.log({ msg })\n      // const networkId = networkDiv.innerHTML\n      const network = await starcoinProvider.getNetwork();\n      console.log(network);\n      const extraParams = { networkId: network.chainId };\n      const sign = await (window as any).starcoin.request({\n        method: "personal_sign",\n        // params: [msg, from, \'Example password\'],\n        // extraParams = params[2] || {}; means it should be an object:\n        // params: [msg, from, { pwd: \'Example password\' }],\n        params: [msg, from, extraParams],\n      });\n      console.log(sign);\n      // personalSignResult.innerHTML = sign\n    } catch (err) {\n      console.error(err);\n      // personalSign.innerHTML = `Error: ${ err.message }`\n    }\n  };\n  ...\n    const personalSignVerify = async () => {\n    try {\n      const accounts = await starcoinProvider.send("stc_requestAccounts", []);\n      const from = accounts[0];\n      const sign = "\u6362\u6210\u4e0a\u9762\u7684\u7b7e\u540d\u7ed3\u679c";\n      const recoveredAddr =\n        await utils.signedMessage.recoverSignedMessageAddress(sign);\n      console.log({ recoveredAddr, from });\n\n      // if (recoveredAddr === from) {\n      //   console.log(\n      //     `@starcoin/starcoin Successfully verified signer as ${recoveredAddr}`\n      //   );\n      //   personalSignRecoverResult.innerHTML = recoveredAddr;\n      // } else {\n      //   console.log("@starcoin/starcoin Failed to verify signer");\n      // }\n    } catch (err) {\n      console.error(err);\n      // personalSignRecoverResult.innerHTML = `Error: ${err.message}`;\n    }\n  };\n')),(0,o.kt)("p",null,"\u8fd9\u4e9b\u662f\u94b1\u5305\u7ecf\u5e38\u7528\u5230\u7684\u57fa\u7840\u529f\u80fd\u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e09\u6b65---\u5408\u7ea6\u901a\u4fe1"},"\u7b2c\u4e09\u6b65 - \u5408\u7ea6\u901a\u4fe1"),(0,o.kt)("p",null,"\u5728 JS \u7aef\u8c03\u7528\u5408\u7ea6"),(0,o.kt)("h3",{id:"nft"},"NFT"),(0,o.kt)("p",null,"\u73a9\u4e0b\u5f53\u4e0b\u6700\u706b\u7684 NFT\uff0c\u5148\u51c6\u5907\u597d NFT \u7684\u63cf\u8ff0\u4fe1\u606f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'...\nconst nft = { \n    name: "test_nft",\n    imageUrl: "https://arweave.net/QeSUFwff9xDbl4SCXlOmEn0TuS4vPg11r2_ETPPu_nk",\n    description: "test nft desc",\n  }\n...\n')),(0,o.kt)("p",null,"\u56fe\u7247\u5730\u5740\u53ef\u4ee5\u662f\u7f51\u7edc\u4e0a\u4efb\u610f\u4e00\u5f20\u53ef\u4ee5\u8bbf\u95ee\u5230\u7684\u5730\u5740\u3002\u7136\u540e\u8c03\u53d6\u5408\u7ea6\u3002\u8fd9\u91cc\u9009\u7528\u5b98\u65b9\u7684 SimpleNFT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// App.tsx\n  const mintWithImageUrl = async () => {\n    // nftResult.innerHTML = 'Calling mintWithImage'\n    // mintWithImage.disabled = true\n    try {\n      const network = await starcoinProvider.getNetwork();\n      console.log(network);\n      // const extraParams = { networkId: network.chainId };\n\n      const functionId =\n        \"0x2c5bd5fb513108d4557107e09c51656c::SimpleNFTScripts::mint_with_image\";\n      const tyArgs: any[] = [];\n      const args = [nft.name, nft.imageUrl, nft.description];\n\n      const chainId = `${network.chainId}` as keyof typeof nodeUrlMap;\n      if (!nodeUrlMap[chainId]) return;\n\n      const nodeUrl = nodeUrlMap[chainId];\n      console.log({ functionId, tyArgs, args, nodeUrl });\n\n      const scriptFunction = await utils.tx.encodeScriptFunctionByResolve(\n        functionId,\n        tyArgs,\n        args,\n        nodeUrl\n      );\n\n      const payloadInHex = (function () {\n        const se = new bcs.BcsSerializer();\n        scriptFunction.serialize(se);\n        return hexlify(se.getBytes());\n      })();\n      console.log({ payloadInHex });\n\n      const txParams = {\n        data: payloadInHex,\n      };\n\n      const transactionHash = await starcoinProvider\n        .getSigner()\n        .sendUncheckedTransaction(txParams);\n      console.log({ transactionHash });\n      // nftResult.innerHTML = 'Call mintWithImage Completed'\n      // mintWithImage.disabled = false\n    } catch (error) {\n      // nftResult.innerHTML = 'Call mintWithImage Failed'\n      // mintWithImage.disabled = false\n      throw error;\n    }\n  };\n")),(0,o.kt)("p",null,"\u7a0d\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728 starcoin \u94b1\u5305\u91cc\u770b\u5230\u81ea\u5df1\u7684 NFT \u4e86\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u7528 HTTP \u83b7\u53d6\u8fc7\u540e\u7aef\u63a5\u53e3\uff0c\u90a3\u4e48\u8fd9\u6bb5\u4ee3\u7801\u5c31\u4f1a\u611f\u89c9\u5f88\u719f\u6089\u3002\u662f\u7684\uff0c\u8c03\u7528\u5408\u7ea6\u5c31\u50cf\u8c03\u7528\u63a5\u53e3\u4e00\u6837\u3002\u4ece\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bf4\u5b83\u4eec\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u8fc7\u662f\u540e\u7aef\u662f\u53bb\u4e2d\u5fc3\u5316\u7684\u4e86\u3002"),(0,o.kt)("h2",{id:"\u7b2c\u56db\u6b65---\u5408\u7ea6"},"\u7b2c\u56db\u6b65 - \u5408\u7ea6"),(0,o.kt)("p",null,"\u9996\u5148\u8fde\u63a5 Barnard \u6d4b\u8bd5\u7f51\u7edc\u3002",(0,o.kt)("em",{parentName:"p"},"\u5f88\u591a\u8ddf\u7740\u6559\u7a0b\u5728\u672c\u5730\u5f00\u8282\u70b9\uff0c\u8fd9\u6837\u53ea\u9002\u5408\u4e86\u89e3\u4e00\u4e9b\u547d\u4ee4\uff0c\u8981\u662f\u73a9\u8fd8\u662f\u8981\u5230\u6d4b\u8bd5\u7f51"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> starcoin --connect ws://barnard.seed.starcoin.org:9870 --local-account-dir ~/.starcoin/barnard/account_vaults console\n")),(0,o.kt)("p",null,"RPC \u5730\u5740\u53ef\u4ece ",(0,o.kt)("a",{parentName:"p",href:"https://starcoinorg.github.io/starcoin-cookbook/zh/docs/getting-started/setup/test-network"},"https://starcoinorg.github.io/starcoin-cookbook/zh/docs/getting-started/setup/test-network")," \u83b7\u53d6\u3002"),(0,o.kt)("p",null,"\u7136\u540e\u521b\u5efa\u8d26\u6237\uff0c\u53ef\u4ee5\u52a0 -p \u53c2\u6570\u8bbe\u7f6e\u5bc6\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> starcoin% account create \n\n> starcoin% account list\n{\n  "ok": [\n    {\n        ...\n')),(0,o.kt)("p",null,"\u8d26\u6237\u597d\u4e86\u4e4b\u540e\u53ef\u4ee5\u53bb ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.starcoin.org/barnard"},"https://faucet.starcoin.org/barnard")," \u9886\u4e00\u4e9b\u6d4b\u8bd5\u5e01\uff0c\u53d1\u5408\u7ea6\u662f\u9700\u8981\u7684\u3002"),(0,o.kt)("h3",{id:"\u5408\u7ea6\u9879\u76ee"},"\u5408\u7ea6\u9879\u76ee"),(0,o.kt)("p",null,"\u5148\u51c6\u5907\u547d\u4ee4\u884c\u5de5\u5177\u3002",(0,o.kt)("a",{parentName:"p",href:"https://github.com/starcoinorg/starcoin/releases/tag/v1.11.13"},"https://github.com/starcoinorg/starcoin/releases/tag/v1.11.13")," \u5728\u8fd9\u91cc\u4e0b\u8f7d\u9002\u5408\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002"),(0,o.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a\u9879\u76ee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> mpm package new starcoin-contract\n")),(0,o.kt)("p",null,"\u628a counter \u4ee3\u7801\u6284\u8fc7\u6765\u3002",(0,o.kt)("a",{parentName:"p",href:"https://starcoinorg.github.io/starcoin-cookbook/zh/docs/move/deploy-first-move-contract"},"https://starcoinorg.github.io/starcoin-cookbook/zh/docs/move/deploy-first-move-contract")),(0,o.kt)("p",null,"\u6784\u5efa"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> mpm release\n")),(0,o.kt)("p",null,"\u90e8\u7f72"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> mpm deploy --rpc ws://barnard.seed.starcoin.org:9870 --local-account-dir  ~/.starcoin/barnard/account_vaults ~/HelloWorld/starcoin-contract/release/my_counter.v0.0.1.blob        \nUse package address (0xb80660f71e0d5ac2b5d5c43f2246403f) as transaction sender\nNo password given, use empty String.\ntxn 0x1d9b69f5fe765897875689b52df7f4807ca663b073bfcea9a763c3948ebeddb4 submitted.\nThe deployment is successful.\n")),(0,o.kt)("p",null,"\u8fd9\u6837\u5c31\u90e8\u7f72\u6210\u529f\u4e86\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u548c\u5408\u7ea6\u901a\u4fe1\u4e86\u3002\u5c31\u50cf\u524d\u9762\u7684 NFT \u4e00\u6837\u3002"),(0,o.kt)("h3",{id:"\u8c03\u5408\u7ea6"},"\u8c03\u5408\u7ea6"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u5199\u64cd\u4f5c")),(0,o.kt)("p",null,"\u628a\u4e0b\u9762\u7684 functionId \u6362\u6210\u4f60\u90e8\u7f72\u7684\u5408\u7ea6\u3002\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u73a9\u800d\u4e86\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// App.tsx\n...\n const initCounterStruct = async () => {\n    const accounts = await starcoinProvider.send("stc_requestAccounts", []);\n    console.log(accounts);\n    const network = await starcoinProvider.getNetwork();\n    console.log(network);\n    const chainId = `${network.chainId}` as keyof typeof nodeUrlMap;\n    if (!nodeUrlMap[chainId]) return;\n    const nodeUrl = nodeUrlMap[chainId];\n    const token = "0x00000000000000000000000000000001::STC::STC";\n    const functionId =\n      "0xb80660f71e0d5ac2b5d5c43f2246403f::RockPaperScissorsV6::init_counter";\n    const tyArgs: any[] = [token];\n    const args: any = [];\n    const scriptFunction = await utils.tx.encodeScriptFunctionByResolve(\n      functionId,\n      tyArgs,\n      args,\n      nodeUrl\n    );\n\n    const payloadInHex = (function () {\n      const se = new bcs.BcsSerializer();\n      scriptFunction.serialize(se);\n      return hexlify(se.getBytes());\n    })();\n    console.log({ payloadInHex });\n\n    const txParams = {\n      data: payloadInHex,\n    };\n\n    const transactionHash = await starcoinProvider\n      .getSigner()\n      .sendUncheckedTransaction(txParams);\n    console.log({ transactionHash });\n  };\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u8bfb\u64cd\u4f5c")),(0,o.kt)("p",null,"\u4e0a\u9762\u7684\u8c03\u7528\u662f\u5199\u5165\u64cd\u4f5c\uff0c\u518d\u67e5\u8be2\u4e0b\u770b\u770b\u6548\u679c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// App.tsx\n...\n  const getCounterStruct = async () => {\n    const accounts = await starcoinProvider.send("stc_requestAccounts", []);\n    console.log(accounts);\n    const data = await starcoinProvider.getResource(\n      accounts[0],\n      `0xb80660f71e0d5ac2b5d5c43f2246403f::RockPaperScissorsV6::Counter`\n    );\n    console.log(data);\n    const result = await (window as any).starcoin.request({\n      method: "state.get_resource",\n      params: [\n        accounts[0],\n        "0xb80660f71e0d5ac2b5d5c43f2246403f::RockPaperScissorsV6::Counter",\n      ],\n    });\n    console.log(result);\n    // const data = new bcs.BcsDeserializer(\n    //   arrayify(result.raw)\n    // ).de();\n    const de = new bcs.BcsDeserializer(arrayify(result.raw));\n    const name = de.deserializeStr();\n    const value = de.deserializeU8();\n    const timestamp = de.deserializeU64();\n    const input = Number(timestamp);\n    console.log(name, input);\n    console.log({\n      name: Buffer.from(name).toString(),\n      value,\n      timestamp: new Date(Number(timestamp) * 1000).toLocaleString(),\n    });\n  };\n')),(0,o.kt)("p",null,"\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u5df2\u7ecf\u52a0\u4e86\u9664 value \u4e4b\u5916\u7684\u5176\u5b83\u5b57\u6bb5\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u4e86 bsc \u7ed3\u6784\u7684\u89e3\u6790\u3002\u5177\u4f53\u6587\u6863\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://starcoinorg.github.io/starcoin-cookbook/zh/docs/web3/understanding-resource-and-bcs/bcs/"},"https://starcoinorg.github.io/starcoin-cookbook/zh/docs/web3/understanding-resource-and-bcs/bcs/")),(0,o.kt)("p",null,"\u8fd9\u4e2a\u89e3\u6790\u662f\u6309\u7167 ",(0,o.kt)("strong",{parentName:"p"},"Move \u90a3\u8fb9\u5b9a\u4e49\u7684\u5b57\u6bb5\u987a\u5e8f\u6765\u7684")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  const de = new bcs.BcsDeserializer(arrayify(result.raw));\n  const name = de.deserializeStr();\n  const value = de.deserializeU8();\n  const timestamp = de.deserializeU64();\n")),(0,o.kt)("p",null,"\u5bf9\u5e94\u4e86"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"...\n  struct Counter has key, store, drop {\n      name: vector<u8>,\n      value: u8,\n      timestamp: u64,\n      addr: address,\n  }\n...\n")),(0,o.kt)("p",null,"\u8fd9\u91cc ",(0,o.kt)("inlineCode",{parentName:"p"},"Counter")," \u7ed3\u6784\u6700\u540e\u4e00\u4e2a addr \u662f address\u3002\u73b0\u5728\u9700\u8981\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"const addr = AccountAddress.deserialize(de);")," \u89e3\u6790\uff0c\u4e0d\u8fc7\u4f60\u5b66\u4e60\u7684\u65f6\u5019\u53ef\u80fd\u5c31\u5df2\u7ecf\u6709 ",(0,o.kt)("inlineCode",{parentName:"p"},"de.deserializeAccountAddress();")," \u65b9\u6cd5\u4e86\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u5220\u9664")),(0,o.kt)("p",null,"\u5220\u9664\u5c31\u662f\u8981\u628a ",(0,o.kt)("inlineCode",{parentName:"p"},"Counter")," \u4ece\u7528\u6237\u8d26\u6237\u4e0b\u79fb\u9664\u3002\u8fd9\u4e2a\u64cd\u4f5c\u662f web3.0 \u76f8\u6bd4\u4e8e web2.0 \u6700\u5927\u7684\u8fdb\u6b65\u3002\u5c31\u662f\u9664\u4e86\u7528\u6237\u81ea\u5df1\u53ef\u4ee5\u5220\u9664\uff0c\u5176\u4ed6\u4eba\u90fd\u4e0d\u80fd\u5220\u9664\u3002\u5982\u679c\u5408\u7ea6\u8ba9\u5176\u4ed6\u4eba\u4e5f\u53ef\u4ee5\u5220\u9664\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u5408\u7ea6\u662f\u6ca1\u4eba\u73a9\u7684\u3002\u8fd9\u5c31\u50cf\u522b\u4eba\u80fd\u968f\u610f\u62ff\u8d70\u4f60\u7684\u94b1\u4e00\u6837\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// Counter.move\n...\n  struct Counter has key, store, drop {\n    name: vector<u8>,\n    value: u8,\n    timestamp: u64,\n    addr: address,\n  }\n  ...\n  public(script) fun remove_counter(account: signer) acquires Counter {\n    move_from<Counter>(Signer::address_of(&account));\n  }\n...\n")),(0,o.kt)("p",null,"\u5220\u9664\u5728 Move \u91cc\u662f\u8fd9\u6837\u7684\u3002\u5728 JS \u4e2d\u662f\u548c\u4e4b\u524d\u4e00\u6837\u8c03\u7528\u7684\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Counter.tsx\n...\n  const removeCounter = useCallback(async () => {\n    const functionId = `${ContractModule}::remove_counter`;\n    const tyArgs: any[] = [];\n    const args: any = [];\n\n    await sendTx(functionId, tyArgs, args);\n  }, [sendTx]);\n...\n")),(0,o.kt)("p",null,"\u5230\u8fd9\u91cc\uff0c\u4f60\u5df2\u7ecf\u5b8c\u6210\u5165\u95e8\u3002\u662f\u7684\uff0c\u662f\u5165\u95e8\u3002\u63a5\u4e0b\u6765\u7528\u4e00\u4e2a SicBoGame \u6765\u5c55\u793a\u4e0b\u5982\u4f55\u8fdb\u9636\u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e94\u6b65---game-\u8fdb\u9636"},"\u7b2c\u4e94\u6b65 - Game \u8fdb\u9636"),(0,o.kt)("p",null,"SicBoGame \u5177\u4f53\u95ee\u9898\u6765\u81ea ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/starcoinorg/dapps/issues/9"},"https://github.com/starcoinorg/dapps/issues/9")," \u3002\u4e5f\u5c31\u662f\u56e0\u4e3a\u505a\u4e0d\u5230\u540c\u65f6\u4e0b\u6ce8\uff0c\u6240\u4ee5\u9700\u8981\u5408\u7ea6\u9690\u85cf\u5148\u4e0b\u6ce8\u7684\u4fe1\u606f\u3002\u4f46\u533a\u5757\u94fe\u7684\u4fe1\u606f\u90fd\u662f\u516c\u5f00\u7684\uff0c\u5982\u4f55\u9690\u85cf\u5462\uff1fissues9 \u4e5f\u7ed9\u4e86\u65b9\u6cd5\uff0c\u5c31\u662f sha3 \u5904\u7406\uff0c\u7136\u540e\u5728\u5408\u7ea6\u91cc\u6bd4\u8f83\u3002\u5f88\u5927\u7684\u6570\u5b57\uff0c\u662f\u4e3a\u4e86\u9632\u6b62\u78b0\u649e\u3002\u5728\u8be5\u793a\u4f8b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u8fd9\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u4e86\u3002"),(0,o.kt)("p",null,"\u65b0\u5efa SicBo.move \u6587\u4ef6\uff0c\u5b9a\u4e49 Bank \u548c Game"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"}," struct Bank<phantom T: store> has store, key {\n    bank: Token::Token<T>\n  }\n\n  struct Game has key, store, drop {\n      aliceSecret: vector<u8>,\n      bobNum: u8,\n      aliceNum: u8,\n      timestamp: u64,\n      amount: u128,\n      campRaw: vector<u8>,\n      camp: vector<u8>,\n      aliceWin: bool,\n      bobWin: bool\n  }\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Token::Token<T>")," \u662f\u4e0d\u80fd\u88ab ",(0,o.kt)("inlineCode",{parentName:"p"},"drop")," \u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u50cf\u8fd9\u6837\n\u88ab Game \u6301\u6709"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"  struct Game has key, store, drop {\n    aliceSecret: vector<u8>,\n    bobNum: u8,\n    aliceNum: u8,\n    timestamp: u64,\n    ..\n    bank: Token::Token<T>\n  }\n")),(0,o.kt)("p",null,"\u8fd9\u6837\u4f1a\u5bfc\u81f4 Game \u4e0d\u80fd\u88ab\u5220\u9664\uff0c\u8fdb\u800c\u4e00\u4e2a\u4eba\u53ea\u80fd\u5f00\u4e00\u5c40\u6e38\u620f\u3002\u6211\u4eec\u5e0c\u671b\u4e00\u4e2a\u6e38\u620f\u7ed3\u675f\u540e\uff0c\u8fd8\u53ef\u4ee5\u5f00\u59cb\u4e0b\u4e00\u5c40\u7684\u3002"),(0,o.kt)("p",null,"\u7136\u540e\u521d\u59cb\u5316 Back \u8fd9\u91cc\u548c\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684\u4e00\u6837\uff0c\u4e0d\u4e00\u6837\u7684\u662f\u521d\u59cb\u5316 bank \u7684\u547d\u4ee4\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"  /// @admin init bank\n  public(script) fun init_bank<TokenType: store>(signer: signer, amount: u128) {\n      let account = &signer;\n      let signer_addr = Signer::address_of(account);\n\n      assert!(signer_addr == @admin, 10003);\n      assert!(! exists<Bank<TokenType>>(signer_addr), 10004);\n      assert!(Account::balance<TokenType>(signer_addr) >= amount, 10005);\n\n      let token = Account::withdraw<TokenType>(account, amount);\n      move_to(account, Bank<TokenType>{\n          bank: token\n      });\n\n      // move_to(account, BankEvent<TokenType>{\n      //     check_event: Event::new_event_handle<CheckEvent>(account),\n      // });\n  }\n")),(0,o.kt)("p",null,"\u56e0\u4e3a\u6211\u4eec\u8bbe\u5b9a\u4e86 admin \u4e3a\u5408\u7ea6\u6240\u6709\u8005\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u8981\u7528\u547d\u4ee4\u884c\u6765\u521d\u59cb\u5316 bank\u3002"),(0,o.kt)("p",null,"\u4f7f\u7528 starcoin \u547d\u4ee4\u884c\u5de5\u5177\u8fdb\u5165 console"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ starcoin --connect ws://barnard.seed.starcoin.org:9870 --local-account-dir ~/.starcoin/barnard/account_vaults console\n")),(0,o.kt)("p",null,"\u7136\u540e\u6267\u884c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"starcoin% starcoin% account execute-function --function 0xb80660f71e0d5ac2b5d5c43f2246403f::SicBo::init_bank -t 0x00000000000000000000000000000001::STC::STC --arg 0u128 -b\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"--arg 0u128")," \u4e2d ",(0,o.kt)("em",{parentName:"strong"},(0,o.kt)("inlineCode",{parentName:"em"},"u128"))," \u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u8d77\u521d\u662f\u4f7f\u7528\u7684 ",(0,o.kt)("inlineCode",{parentName:"strong"},"--arg 0")," \u5f97\u5230\u53c2\u6570\u9519\u8bef\u3002\u56e0\u4e3a\u5408\u7ea6\u6307\u5b9a\u4e86 amount \u662f u128\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e5f\u9700\u8981 u128 \u540e\u7f00\u6307\u660e\u7c7b\u578b\u3002")),(0,o.kt)("p",null,"\u5982\u679c\u547d\u4ee4\u8fd4\u56de ",(0,o.kt)("inlineCode",{parentName:"p"},"account 0xb80660f71e0d5ac2b5d5c43f2246403f is locked")," \u8bf4\u660e\u8d26\u6237\u662f\u9501\u4f4f\u7684\uff0c\u9700\u8981\u89e3\u9501\u8d26\u6237 ",(0,o.kt)("inlineCode",{parentName:"p"},"starcoin% account unlock"),"\u3002\u7136\u540e\u518d\u8c03\u7528\u547d\u4ee4\u3002\u5f97\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"txn 0x14bc2406c4967194fcb2b47a03a6404117bac24ebee6cf25d3c05b2fe7e65fd5 submitted.")," \u7c7b\u4f3c\u4fe1\u606f\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u7684\u90e8\u7f72\u5df2\u7ecf\u88ab\u533a\u5757\u94fe\u91c7\u7eb3\u4e86\u3002\u518d\u7b49\u4e00\u4f1a\u5c31\u4f1a\u5f97\u5230\u4e00\u5927\u4e32\u6267\u884c\u540e\u7684\u8fd4\u56de\u3002\u8fd9\u65f6 bank \u5df2\u7ecf\u521d\u59cb\u5316\u597d\u4e86\uff0c\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316 Game \u4e86\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// SicBo.move\n...\n    public(script) fun init_game<TokenType: store>(alice: signer, aliceSecret: vector<u8>, amount: u128) acquires Bank {\n        let account = &alice;\n\n        // \u628a alice \u7684\u989d\u5ea6\u8d28\u62bc\u7ed9\u94f6\u884c\n        let token = Account::withdraw<TokenType>(account, amount);\n        let bank = borrow_global_mut<Bank<TokenType>>(@admin);\n        Token::deposit<TokenType>(&mut bank.bank, token);\n\n        // \u521d\u59cb\u5316 Game\n        move_to(account, Game {\n            aliceSecret: aliceSecret,\n            bobNum: 0,\n            aliceNum: 0,\n            timestamp: Timestamp::now_seconds(),\n            amount: amount,\n            campRaw: Vector::empty(),\n            camp: Vector::empty(),\n            aliceWin: false,\n            bobWin: false,\n        });\n    }\n")),(0,o.kt)("p",null,"\u521d\u59cb\u5316 Game \u7684\u53c2\u6570\u662f alice \u7684\u52a0\u5bc6\u4fe1\u606f\u548c alice \u7684\u4e0b\u6ce8\u989d\u5ea6\u3002\u8fd9\u91cc\u5f88\u591a\u4fe1\u606f\u662f\u6211 debug \u7528\u7684\uff0c",(0,o.kt)("strong",{parentName:"p"},"debug move \u7684\u66f4\u597d\u65b9\u6cd5\u662f\u5355\u5143\u6d4b\u8bd5"),"\u3002\u9ed8\u8ba4 alice \u548c bob \u7684\u731c\u7684\u6570\u5b57\u662f 0 \u3002\u90a3\u4e48 0 \u5c31\u4e0d\u5e94\u8be5\u88ab\u7528\u4f5c\u4e0b\u6ce8\u6570\u5b57\uff0c\u53ef\u4ee5\u662f 1 \uff5e 10\u3002"),(0,o.kt)("p",null,"alice \u521d\u59cb\u5316 game \u540e\uff0c\u7531 bob \u62ff\u7740 alice \u7684\u5730\u5740\u53bb\u53c2\u52a0 alice \u7684 game\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"  public(script) fun bob_what<TokenType: store>(bob: signer, alice: address, bobNum: u8, amount: u128) acquires Game, Bank {\n        let account = &bob;\n\n        // \u628a bob \u7684\u4e0b\u6ce8\u989d\u8d28\u62bc\u7ed9 bank\n        let token = Account::withdraw<TokenType>(account, amount);\n        let bank = borrow_global_mut<Bank<TokenType>>(@admin);\n        Token::deposit<TokenType>(&mut bank.bank, token);\n\n        // game \u8bb0\u5f55\u4e0b bob \u7684\u6570\u5b57\n        let game = borrow_global_mut<Game>(alice);\n        game.bobNum = bobNum;\n        game.amount = game.amount + amount;\n        // TODO \n        // game.bobAddr = account\n    }\n\n")),(0,o.kt)("p",null,"\u5f53 bob \u4e0b\u6ce8\u5b8c\uff0c\u518d\u7531 alice \u89e3\u5bc6\u4ed6\u7684\u4e0b\u6ce8\u3002\u5982\u679c alice \u4e0d\u5982\u5b9e\u89e3\u5bc6\u4ed6\u7684\u4e0b\u6ce8\uff0c\u5c31\u76f4\u63a5\u5224\u65ad alice \u8f93\u6389\u4e86\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"...\n    public(script) fun alice_what<TokenType: store>(alice: signer, aliceNum: u8) acquires Game {\n        let account = &alice;\n        // let token = Account::withdraw<TokenType>(account, amount);\n\n        let game = borrow_global_mut<Game>(Signer::address_of(account));\n        game.aliceNum = aliceNum;\n\n        // check valid\n        let tmpVec = Vector::empty();\n        let tempCamp = Vector::empty();\n\n        let addr = Signer::address_of(account);\n        Vector::append(&mut tmpVec, BCS::to_bytes(&addr));\n        Vector::append(&mut tmpVec, BCS::to_bytes(&aliceNum));\n        \n        Vector::append(&mut tempCamp, BCS::to_bytes(&addr));\n        Vector::append(&mut tempCamp, BCS::to_bytes(&aliceNum));\n        \n        game.campRaw = tmpVec;\n        let camp = Hash::sha3_256(tempCamp);\n        game.camp = camp;\n        \n\n        if (&game.camp == &game.aliceSecret) {\n            if (game.aliceNum > game.bobNum) {\n              game.aliceWin = true;\n              win_token(game.aliceAddr, game.amount);\n            } else if (game.aliceNum < game.bobNum) {\n              game.bobWin = true;  \n              win_token(game.bobWin, game.amount);\n            } else {\n              // \u5e73\u5c40\uff0c\u5404\u81ea\u53d6\u56de\u81ea\u5df1\u7684\u6ce8\u989d\n              game.aliceWin = true;\n              game.bobWin = true;  \n              win_token(game.bobWin, game.amount / 2);\n              win_token(game.bobWin, game.amount / 2);\n            }\n        } else {\n            game.bobWin = true;\n            win_token(game.bobWin, game.amount);\n        }\n\n        // \u7ed3\u675f Game\n        move_from<Game>(game.aliceAddr);\n    }\n\n    fun win_token<TokenType: store>(account: address, amount: u128) acquires Bank {\n        let bank = borrow_global_mut<Bank<TokenType>>(@admin);\n        let token = Token::withdraw<TokenType>(&mut bank.bank, amount);\n        Account::deposit<TokenType>(account, token);\n    }\n...\n")),(0,o.kt)("p",null,"\u8fd9\u6837\u8fd9\u4e2a\u6e38\u620f\u7684\u4e3b\u4f53\u903b\u8f91\u5c31\u5b8c\u6210\u4e86\u3002\u5176\u4e2d\u8bb0\u5f55\u4e86 Game \u5f00\u59cb\u65f6\u95f4\u3002\u53ef\u4ee5\u518d\u589e\u52a0\u4e00\u4e9b check \u51fd\u6570\uff1a\u6bd4\u5982\uff0c\u5982\u679c bob \u6ca1\u6709\u6309\u6307\u5b9a\u65f6\u95f4\u4e0b\u6ce8\uff0c\u90a3\u4e48 alice \u5c31\u53ef\u4ee5\u7ec8\u6b62\u8be5\u5c40 Game\uff0c\u5e76\u62ff\u56de\u81ea\u5df1\u7684\u6ce8\u989d\u3002\u540c\u6837\uff0c\u5982\u679c alice \u6ca1\u6709\u6309\u65f6\u53bb\u63ed\u79d8\u81ea\u5df1\u7684\u4e0b\u6ce8\uff0c\u4e5f\u53ef\u4ee5\u88c1\u5b9a alice \u8f93\u4e86\u3002"),(0,o.kt)("p",null,"JS \u5982\u4f55\u5199\u3002\u89c1",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Tonyce/starcoin-react-stepby"},"\u4ed3\u5e93"),"\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"SicBoGame.tsx")),(0,o.kt)("h2",{id:"\u7b2c\u516d\u6b65---\u6d4b\u8bd5\u7528\u4f8b"},"\u7b2c\u516d\u6b65 - \u6d4b\u8bd5\u7528\u4f8b"),(0,o.kt)("p",null,"\u4e0a\u9762\u7684\u6e38\u620f\u5728 Debug \u7684\u8fc7\u7a0b\u4e2d\uff0c\u7528\u4e86\u4e00\u4e2a\u6bd4\u8f83\u201c\u7b28\u201d\u7684\u65b9\u6cd5\u6765 debug Move \u5408\u7ea6\u7684 sha3-256 \u7ed3\u679c\u3002\u5c31\u662f\u628a sha3-256 \u7684\u7ed3\u679c\u5b58\u4e86\u4e0b\u6765\uff0c\u7136\u540e\u53d6\u6765\u5bf9\u6bd4\u3002\u5176\u5b9e\u8fd9\u4e2a\u9a8c\u8bc1\u7528 unit-test (\u6d4b\u8bd5\u7528\u4f8b) \u6765\u505a\u4f1a\u66f4\u9ad8\u6548\u3002\u63a5\u4e0b\u6765\u4e00\u4e2a demo \u6765\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u6d4b\u8bd5\u7528\u4f8b\u6765\u9a8c\u8bc1 Move sha3-256 \u7ed3\u679c\u3002"),(0,o.kt)("p",null,"\u4e3a\u5355\u7eaf\u7684\u4ecb\u7ecd\u6d4b\u8bd5\u7528\u4f8b\uff0c\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mpm package new move_ut\n")),(0,o.kt)("p",null,"\u4fee\u6539  Move.toml \uff0c\u52a0\u5165 starcoin \u7684\u5e93\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'...\n[addresses]\nStarcoinFramework = "0x1"\nadmin = "0xb80660f71e0d5ac2b5d5c43f2246403f"\nSFC = "0x6ee3f577c8da207830c31e1f0abb4244"\n\n[dependencies]\nStarcoinFramework = {git = "https://github.com/starcoinorg/starcoin-framework.git", rev="cf1deda180af40a8b3e26c0c7b548c4c290cd7e7"}\nstarcoin-framework-commons = { git = "https://github.com/starcoinorg/starcoin-framework-commons.git", rev = "e7f538175a5f50a97207692569b6631a87ee08cc" }\n...\n')),(0,o.kt)("p",null,"source \u4e0b\u65b0\u5efa\u4e00\u4e2a move \u6587\u4ef6\uff0c\u968f\u4fbf\u4ec0\u4e48\u540d\u5b57\u3002\u62f7\u8d1d ",(0,o.kt)("a",{parentName:"p",href:"https://diem.github.io/move/unit-testing.html"},"https://diem.github.io/move/unit-testing.html")," \u793a\u4f8b\u4ee3\u7801\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"#[test_only]\nmodule admin::UTest {\n    struct MyCoin has key { value: u64 }\n\n    public fun make_sure_non_zero_coin(coin: MyCoin): MyCoin {\n        assert!(coin.value > 0, 0);\n        coin\n    }\n\n    public fun has_coin(addr: address): bool {\n        exists<MyCoin>(addr)\n    }\n\n    #[test]\n    fun make_sure_non_zero_coin_passes() {\n        let coin = MyCoin { value: 1 };\n        let MyCoin { value: _ } = make_sure_non_zero_coin(coin);\n    }\n}\n")),(0,o.kt)("p",null,"\u7136\u540e\u6267\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"mpm package test")," \u540e\u4f1a\u770b\u5230 test \u7684\u8f93\u51fa"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f mpm package test   \nBUILDING UnitTest\nBUILDING StarcoinFramework\nBUILDING starcoin-framework-commons\nBUILDING move_ut\nRunning Move unit tests\n[ PASS    ] 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest::make_sure_non_zero_coin_passes\nTest result: OK. Total tests: 1; passed: 1; failed: 0\n")),(0,o.kt)("p",null,"\u8fd9\u5c31\u8bc1\u660e\u6d4b\u8bd5\u7528\u4f8b\u6210\u529f\u8fd0\u884c\u3002\u5728\u8fd9\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"#[test_only]")," \u5b8f\uff0c\u8fd9\u6837\u8fd9\u4e2a module \u5c31\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u5230 release \u4e2d\u3002\u5982\u679c\u5728\u8fd9\u4e2a\u793a\u4f8b\u9879\u76ee\u4e2d\u6267\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"mpm release"),"\uff0c\u5c31\u4f1a\u5f97\u5230\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f mpm release\nPackaging Modules:\nError: must at latest one module\n")),(0,o.kt)("p",null,"\u8fd9\u5c31\u8bf4\u660e\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"test_only")," module \u6ca1\u6709\u88ab\u7f16\u8bd1\u5230 release \u4e2d\u3002"),(0,o.kt)("p",null,"\u6211\u4eec\u60f3\u9a8c\u8bc1\u7684\u662f sha3-256 \u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u4fee\u6539 move \u4ee3\u7801\u4e3a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},'#[test_only]\nmodule admin::UTest {\n\n    use StarcoinFramework::Debug;\n    use StarcoinFramework::Vector;\n    use StarcoinFramework::Hash;\n\n    struct MyCoin has key { value: u64 }\n\n    public fun make_sure_non_zero_coin(coin: MyCoin): MyCoin {\n        assert!(coin.value > 0, 0);\n        coin\n    }\n\n    public fun has_coin(addr: address): bool {\n        exists<MyCoin>(addr)\n    }\n\n    #[test]\n    fun make_sure_non_zero_coin_passes() {\n        let coin = MyCoin { value: 1 };\n        let MyCoin { value: _ } = make_sure_non_zero_coin(coin);\n    }\n\n    #[test]\n    fun test_hash_result() {\n        let tempCamp = Vector::empty();\n        Vector::append(&mut tempCamp, b"hello world");\n        let camp = Hash::sha3_256(tempCamp);\n        Debug::print(&camp);\n    }\n\n}\n')),(0,o.kt)("p",null,"\u65b0\u52a0\u4e86\u4e00\u4e2a test \u51fd\u6570 ",(0,o.kt)("inlineCode",{parentName:"p"},"test_hash_result"),'\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u505a\u4e00\u4ef6\u4e8b\uff1asha3-256("hello world")\u3002\u5148 Debug \u6253\u5370\u4e0b\u770b\u770b\u7ed3\u679c'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f mpm package test \nCACHED UnitTest\nCACHED StarcoinFramework\nCACHED starcoin-framework-commons\nBUILDING move_ut\nRunning Move unit tests\n[ PASS    ] 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest::make_sure_non_zero_coin_passes\n[debug] (&) [100, 75, 204, 126, 86, 67, 115, 4, 9, 153, 170, 200, 158, 118, 34, 243, 202, 113, 251, 161, 217, 114, 253, 148, 163, 28, 59, 251, 242, 78, 57, 56]\n[ PASS    ] 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest::test_hash_result\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n")),(0,o.kt)("p",null,"\u8fd9\u662f\u6211\u6267\u884c JS \u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u8089\u773c\u770b\u51fa\u662f\u4e00\u6837\u7684\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f node sha3test.js \n{\n  type: 'Buffer',\n  data: [\n    100,  75, 204, 126,  86,  67, 115,   4,\n      9, 153, 170, 200, 158, 118,  34, 243,\n    202, 113, 251, 161, 217, 114, 253, 148,\n    163,  28,  59, 251, 242,  78,  57,  56\n  ]\n}\n")),(0,o.kt)("p",null,"\u4f46\u8fd9\u6837\u662f\u4e0d\u591f\u7684\uff0c\u9700\u8981 assert \u7ed3\u679c\u662f\u548c JS \u7684\u7ed3\u679c\u4e00\u6837\u7684\u3002\u4fee\u6539 ",(0,o.kt)("inlineCode",{parentName:"p"},"test_hash_result")," \u4e3a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},'...\n    #[test]\n    fun test_hash_result() {\n        let expect_vec = vector[\n            100,  75, 204, 126,  86,  67, 115,   4,\n            9, 153, 170, 200, 158, 118,  34, 243,\n            202, 113, 251, 161, 217, 114, 253, 148,\n            163,  28,  59, 251, 242,  78,  57,  56\n        ];\n        let temp_camp = Vector::empty();\n        Vector::append(&mut temp_camp, b"hello world");\n        let camp = Hash::sha3_256(temp_camp);\n        Debug::print(&camp);\n        assert!(&camp == &expect_vec, 1);\n    }\n')),(0,o.kt)("p",null,"\u7136\u540e\u518d\u6267\u884c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f mpm package test  \nCACHED UnitTest\nCACHED StarcoinFramework\nCACHED starcoin-framework-commons\nBUILDING move_ut\nRunning Move unit tests\n[ PASS    ] 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest::make_sure_non_zero_coin_passes\n[debug] (&) [100, 75, 204, 126, 86, 67, 115, 4, 9, 153, 170, 200, 158, 118, 34, 243, 202, 113, 251, 161, 217, 114, 253, 148, 163, 28, 59, 251, 242, 78, 57, 56]\n[ PASS    ] 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest::test_hash_result\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\u5982\u679c\u6000\u7591 assert\uff0c\u53ef\u4ee5\u4fee\u6539 ",(0,o.kt)("inlineCode",{parentName:"p"},"expect_vec")," \u4e2d\u7684\u4e00\u4e2a\u6570\u636e\uff0c\u518d ",(0,o.kt)("inlineCode",{parentName:"p"},"mpm package test"),"  \u4e00\u4e0b\u3002\u7136\u540e\u5c31\u4f1a\u53d1\u73b0\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"..\n[debug] (&) [100, 75, 204, 126, 86, 67, 115, 4, 9, 153, 170, 200, 158, 118, 34, 243, 202, 113, 251, 161, 217, 114, 253, 148, 163, 28, 59, 251, 242, 78, 57, 56]\n[ FAIL    ] 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest::test_hash_result\n\nTest failures:\n\nFailures in 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest:\n\n\u250c\u2500\u2500 test_hash_result \u2500\u2500\u2500\u2500\u2500\u2500\n\u2502 error[E11001]: test failure\n\u2502    \u250c\u2500 ./sources/ut.move:41:9\n\u2502    \u2502\n\u2502 30 \u2502     fun test_hash_result() {\n\u2502    \u2502         ---------------- In this function in 0xb80660f71e0d5ac2b5d5c43f2246403f::UTest\n\u2502    \xb7\n\u2502 41 \u2502         assert!(&camp == &expect_vec, 1);\n\u2502    \u2502         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Test was not expected to abort but it aborted with 1 here\n\u2502 \n\u2502 \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nTest result: FAILED. Total tests: 2; passed: 1; failed: 1\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7528\u4f8b\u6ca1\u6709\u901a\u8fc7\u3002\u5b8c\u7f8e\u3002"),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u4f46\u53ef\u4ee5\u4fdd\u8bc1\u7a0b\u5e8f\u8d28\u91cf\uff0c\u8fd8\u80fd\u5927\u5927\u7684\u63d0\u9ad8\u6548\u7387\u3002"),(0,o.kt)("h2",{id:"\u518d\u7cbe\u8fdb\u8ba1\u5212"},"\u518d\u7cbe\u8fdb\u8ba1\u5212"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"cookbook \u4f5c\u4e3a\u624b\u518c\uff0c\u9047\u5230\u95ee\u9898\u53bb\u770b\u770b\u3002"),(0,o.kt)("li",{parentName:"ol"},"move \u5408\u7ea6\u5e38\u7528\u65b9\u6cd5\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u3002\u3002\u3002")))}p.isMDXComponent=!0}}]);