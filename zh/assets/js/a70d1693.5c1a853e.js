"use strict";(self.webpackChunkstarcoin_cookbook=self.webpackChunkstarcoin_cookbook||[]).push([[5568],{3905:function(e,n,t){t.d(n,{Zo:function(){return i},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),k=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},i=function(e){var n=k(e.components);return a.createElement(u.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),p=k(t),d=r,m=p["".concat(u,".").concat(d)]||p[d]||l[d]||s;return t?a.createElement(m,o(o({ref:n},i),{},{components:t})):a.createElement(m,o({ref:n},i))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=p;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var k=2;k<s;k++)o[k]=t[k];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5564:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return l},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return k}});var a=t(3117),r=(t(7294),t(3905));const s={},o="\u5982\u4f55 Debug Move \u6a21\u5757\u548c\u6392\u67e5\u95ee\u9898",c={unversionedId:"move/move-test/how-to-debug",id:"move/move-test/how-to-debug",title:"\u5982\u4f55 Debug Move \u6a21\u5757\u548c\u6392\u67e5\u95ee\u9898",description:"Move \u7f16\u7a0b\u6709\u4e24\u79cd\u6d4b\u8bd5\u65b9\u5f0f\uff0c\u5206\u522b\u662f\u5355\u5143\u6d4b\u8bd5\uff08unit test\uff09\u548c\u96c6\u6210\u6d4b\u8bd5\uff08integration test\uff09\u3002\u8fd9\u4e24\u79cd\u6d4b\u8bd5\u65b9\u5f0f\u8db3\u4ee5\u8986\u76d6\u51e0\u4e4e 90% \u7684\u4f7f\u7528\u573a\u666f\u3002\u5355\u5143\u6d4b\u8bd5\u53ef\u4ee5\u7528\u6765\u5bf9\u4e00\u4e9b\u529f\u80fd\u6a21\u5757\u8fdb\u884c\u7b80\u5355\u7684\u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u5f88\u591a\u6d4b\u8bd5\u573a\u666f\u662f\u5728\u533a\u5757\u94fe\u4e0a\u7684\uff0c\u9700\u8981\u4ece\u4e00\u4e9b\u521d\u59cb\u7684\u4ea4\u6613\u72b6\u6001\u5f00\u59cb\uff0c\u5355\u5143\u6d4b\u8bd5\u65e0\u6cd5\u6ee1\u8db3\u6b64\u7c7b\u9700\u6c42\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u66f4\u5f3a\u5927\u7684\u6d4b\u8bd5\u529f\u80fd\u6765\u6a21\u62df\u771f\u5b9e\u533a\u5757\u94fe\u4e0a\u7684\u4ea4\u6613\uff0c\u624d\u80fd\u8986\u76d6\u5927\u90e8\u5206\u7528\u4f8b\uff0c\u4ece\u800c\u8ba9\u4ee3\u7801\u66f4\u52a0\u5065\u58ee\u3002",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/03-move/97-move-test/03-how-to-debug.md",sourceDirName:"03-move/97-move-test",slug:"/move/move-test/how-to-debug",permalink:"/zh/docs/move/move-test/how-to-debug",draft:!1,editUrl:"https://github.com/starcoinorg/starcoin-cookbook/edit/main/i18n/zh/docusaurus-plugin-content-docs/current/03-move/97-move-test/03-how-to-debug.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"move-integration-test",permalink:"/zh/docs/move/move-test/move-integration-test"},next:{title:"\u79fb\u52a8\u865a\u62df\u673a\u3001\u5b57\u8282\u7801\u548c\u53cd\u6c47\u7f16\u7a0b\u5e8f",permalink:"/zh/docs/move/move-test/disassembler"}},u={},k=[{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b",level:3},{value:"\u5355\u5143\u6d4b\u8bd5",id:"\u5355\u5143\u6d4b\u8bd5",level:3},{value:"\u96c6\u6210\u6d4b\u8bd5",id:"\u96c6\u6210\u6d4b\u8bd5",level:3},{value:"\u6b63\u786e\u4ee3\u7801",id:"\u6b63\u786e\u4ee3\u7801",level:3},{value:"Move.toml",id:"movetoml",level:4},{value:"mycake.move",id:"mycakemove",level:4},{value:"mycake_test.move",id:"mycake_testmove",level:4}],i={toc:k};function l(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u5982\u4f55-debug-move-\u6a21\u5757\u548c\u6392\u67e5\u95ee\u9898"},"\u5982\u4f55 Debug Move \u6a21\u5757\u548c\u6392\u67e5\u95ee\u9898"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Move \u7f16\u7a0b\u6709\u4e24\u79cd\u6d4b\u8bd5\u65b9\u5f0f\uff0c\u5206\u522b\u662f\u5355\u5143\u6d4b\u8bd5\uff08unit test\uff09\u548c\u96c6\u6210\u6d4b\u8bd5\uff08integration test\uff09\u3002\u8fd9\u4e24\u79cd\u6d4b\u8bd5\u65b9\u5f0f\u8db3\u4ee5\u8986\u76d6\u51e0\u4e4e 90% \u7684\u4f7f\u7528\u573a\u666f\u3002\u5355\u5143\u6d4b\u8bd5\u53ef\u4ee5\u7528\u6765\u5bf9\u4e00\u4e9b\u529f\u80fd\u6a21\u5757\u8fdb\u884c\u7b80\u5355\u7684\u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u5f88\u591a\u6d4b\u8bd5\u573a\u666f\u662f\u5728\u533a\u5757\u94fe\u4e0a\u7684\uff0c\u9700\u8981\u4ece\u4e00\u4e9b\u521d\u59cb\u7684\u4ea4\u6613\u72b6\u6001\u5f00\u59cb\uff0c\u5355\u5143\u6d4b\u8bd5\u65e0\u6cd5\u6ee1\u8db3\u6b64\u7c7b\u9700\u6c42\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u66f4\u5f3a\u5927\u7684\u6d4b\u8bd5\u529f\u80fd\u6765\u6a21\u62df\u771f\u5b9e\u533a\u5757\u94fe\u4e0a\u7684\u4ea4\u6613\uff0c\u624d\u80fd\u8986\u76d6\u5927\u90e8\u5206\u7528\u4f8b\uff0c\u4ece\u800c\u8ba9\u4ee3\u7801\u66f4\u52a0\u5065\u58ee\u3002")),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("p",null,"\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5f00\u59cb\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684 Token \u6a21\u5757\uff0c\u6211\u5c06\u7559\u4e0b\u4e00\u4e9b\u5c0f\u9519\u8bef\u6765\u5c55\u793a\u6574\u4e2a debug \u8fc7\u7a0b\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u5730\u5740\u6765\u6d4b\u8bd5")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"address:0xf2aa2eae4ceaae88b308fc904975e4ae  \npublic_key:0x98826ab91a9a5d85dec536418090aa6342991bc8f947613721c8165e7102b132  \nprivate_key:0xa5ead1fb25114b335ad21a07ed5cee8cecba8763309ec78656e7c4ccaf5735e7\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u7528 mpm \u547d\u4ee4\u521b\u5efa\u9879\u76ee")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mpm package new MyCake\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8fdb\u5165\u76ee\u5f55\u5e76\u7f16\u8f91 mycake.move \u6587\u4ef6")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd MyCake\nvi sources/mycake.move\n")),(0,r.kt)("p",null,"\u5728\u6587\u4ef6\u4e2d\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"address Chef{\n    module Cake{\n        use StarcoinFramework::Signer;\n        use StarcoinFramework::Token;\n        use StarcoinFramework::Account;\n\n        struct Cake has copy, drop, store { }\n\n        public fun admin():address{\n            @Chef\n        }\n\n        public fun init(account :&signer){\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::register_token<Cake>( account, 9 );\n        }\n\n        public fun make_cake( account: &signer , amount : u128): Token::Token<Cake> {\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::mint<Cake>( account , amount  )\n        }\n\n        public fun destroy_cake( account: &signer , cake: Token::Token<Cake>) {\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::burn<Cake>( account , cake  );\n        }\n\n        public fun send_cake( _to :address , cake: Token::Token<Cake> ){\n            Account::deposit<Cake>(@Chef, cake);\n        }\n\n        public fun add (x:u128, y:u128 ):u128{\n            x - y\n        }\n\n    }\n}\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7f16\u8f91 Move.toml \u6587\u4ef6")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"vi Move.toml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[package]\nname = "MyCake"\nversion = "0.0.0"\n\n[addresses]\nChef = "0xf2aa2eae4ceaae88b308fc904975e4ae"\n\n[dependencies]\nStarcoinFramework = { git = "https://github.com/starcoinorg/starcoin-framework.git", rev = "01c84198819310620f2417413c3c800df8292ae5" }\n')),(0,r.kt)("h3",{id:"\u5355\u5143\u6d4b\u8bd5"},"\u5355\u5143\u6d4b\u8bd5"),(0,r.kt)("p",null,"\u4ee3\u7801\u7f16\u5199\u5b8c\u6210\u540e\uff0c\u5e94\u9996\u5148\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u4fdd\u8bc1\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002\n\u5355\u5143\u6d4b\u8bd5\u901a\u5e38\u7528\u6765\u6d4b\u8bd5\u4e00\u4e9b\u51fd\u6570\u6216\u8005\u529f\u80fd\u6a21\u5757\u7684\u6b63\u786e\u6027\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u6d4b\u8bd5 add \u51fd\u6570\u7684\u8fd4\u56de\u503c")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801 ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"address Chef{\n    module Cake{\n        use StarcoinFramework::Signer;\n        use StarcoinFramework::Token;\n        use StarcoinFramework::Account;\n\n        struct Cake has copy, drop, store { }\n\n        public fun admin():address{\n            @Chef\n        }\n\n        public fun init(account :&signer){\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::register_token<Cake>( account, 9 );\n        }\n\n        public fun make_cake( account: &signer , amount : u128): Token::Token<Cake> {\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::mint<Cake>( account , amount  )\n        }\n\n        public fun destroy_cake( account: &signer , cake: Token::Token<Cake>) {\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::burn<Cake>( account , cake  );\n        }\n\n        public fun send_cake( _to :address , cake: Token::Token<Cake> ){\n            Account::deposit<Cake>(@Chef, cake);\n        }\n\n        public fun add (x:u128, y:u128 ):u128{\n            x - y\n        }\n\n        #[test]\n        public fun add_test(){\n            assert!( add(10 , 1) == 11, 101);\n        }\n    }\n}\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8fd0\u884c\u6d4b\u8bd5\u547d\u4ee4")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mpm package test\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u83b7\u53d6\u6d4b\u8bd5\u7ed3\u679c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"BUILDING UnitTest\nBUILDING StarcoinFramework\nBUILDING MyCake\nRunning Move unit tests\n[ FAIL    ] 0xf2aa2eae4ceaae88b308fc904975e4ae::Cake::add_test\n\nTest failures:\n\nFailures in 0xf2aa2eae4ceaae88b308fc904975e4ae::Cake:\n\n\u250c\u2500\u2500 add_test \u2500\u2500\u2500\u2500\u2500\u2500\n\u2502 error[E11001]: test failure\n\u2502    \u250c\u2500 ./sources/mycake.move:38:13\n\u2502    \u2502\n\u2502 37 \u2502         public fun add_test(){\n\u2502    \u2502                    -------- In this function in 0xf2aa2eae4ceaae88b308fc904975e4ae::Cake\n\u2502 38 \u2502             assert!( add(10 , 1) == 11, 101);\n\u2502    \u2502             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Test was not expected to abort but it aborted with 101 here\n\u2502 \n\u2502 \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nTest result: FAILED. Total tests: 1; passed: 0; failed: 1\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u53ef\u4ee5\u770b\u5230 add \u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\u4e0d\u662f\u6211\u4eec\u9884\u671f\u7684")," "),(0,r.kt)("p",null,"\u6211\u4eec\u68c0\u67e5\u4e00\u4e0b add \u51fd\u6570\uff0c\u53ef\u4ee5\u770b\u5230\u5176\u5185\u90e8\u5b9e\u73b0\u662f\u9519\u8bef\u7684\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    public fun add (x:u128, y:u128 ):u128{\n        x + y\n    }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u91cd\u65b0\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mpm package test\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u83b7\u53d6\u6d4b\u8bd5\u7ed3\u679c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CACHED UnitTest\nCACHED StarcoinFramework\nBUILDING MyCake\nRunning Move unit tests\n[ PASS    ] 0xf2aa2eae4ceaae88b308fc904975e4ae::Cake::add_test\nTest result: OK. Total tests: 1; passed: 1; failed: 0\n")),(0,r.kt)("p",null,"\u606d\u559c\uff0c\u6240\u6709\u6d4b\u8bd5\u901a\u8fc7\u4e86\uff01  "),(0,r.kt)("p",null,"\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u53d1\u73b0\u51fd\u6570\u6216\u529f\u80fd\u6a21\u5757\u91cc\u7684\u95ee\u9898\u3002\u4f60\u53ef\u4ee5\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u6253\u5370\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u51fd\u6570\uff0c\u4f46\u662f\u4e00\u5b9a\u8bb0\u4f4f\uff0c\u5355\u5143\u6d4b\u8bd5\u662f\u975e\u5e38\u5c40\u9650\u7684\u3002\u5982\u679c\u4f60\u9700\u8981 signature \uff0c\u90a3\u4f60\u53ef\u4ee5\u4f7f\u7528\u96c6\u6210\u6d4b\u8bd5\u3002"),(0,r.kt)("h3",{id:"\u96c6\u6210\u6d4b\u8bd5"},"\u96c6\u6210\u6d4b\u8bd5"),(0,r.kt)("p",null,"\u5355\u5143\u6d4b\u8bd5\u53ea\u80fd\u6ee1\u8db3\u4e00\u5c0f\u90e8\u5206\u7684\u6d4b\u8bd5\u9700\u6c42\u3002\n\u66f4\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5728\u6d4b\u8bd5\u9636\u6bb5\u9700\u8981\u6a21\u62df\u4ee3\u7801\u5728\u533a\u5757\u94fe\u4e0a\u8fd0\u884c\u7684\u60c5\u51b5\uff0c\u5f88\u591a\u95ee\u9898\u53ea\u6709\u5728\u533a\u5757\u94fe\u4e0a\u8fd0\u884c\u65f6\u624d\u80fd\u66b4\u9732\u51fa\u6765\u3002"),(0,r.kt)("p",null,"\u96c6\u6210\u6d4b\u8bd5\u6700\u9002\u5408\u5b8c\u6210\u8fd9\u9879\u9700\u6c42\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u521b\u5efa\u4e00\u4e2a integration-tests \u7684\u5de5\u4f5c\u76ee\u5f55\uff0c\u5e76\u6dfb\u52a0 mycake_test.move \u6587\u4ef6")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir integration-tests\nvi integration-test/mycake.move\n")),(0,r.kt)("p",null,"\u5728 mycake.move \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//# init -n test --public-keys Chef=0x98826ab91a9a5d85dec536418090aa6342991bc8f947613721c8165e7102b132 \n\n//# faucet --addr Chef --amount 10000000000000000\n\n//# faucet --addr guest --amount 10000000000000000\n\n//# run --signers Chef\nscript {\n    use Chef::Cake;\n    fun init(signer: signer) {\n        Cake::init(&signer);\n    }\n}\n// check: EXECUTED\n\n//# run --signers Chef\nscript {\n    use StarcoinFramework::Signer;\n    use StarcoinFramework::Account;\n    use Chef::Cake;\n    fun make_cake(signer: signer) {\n        let cake = Cake::make_cake(&signer , 1 * 1000 * 1000 * 1000);\n        Account::deposit<Cake::Cake>( Signer::address_of(&signer) , cake );\n        assert!( Account::balance<Cake::Cake>(@Chef) == 1 * 1000 * 1000 * 1000 , 1001);\n    }\n}\n// check: EXECUTED\n\n//# run --signers Chef\nscript {\n    use Chef::Cake;\n    fun destroy_cake(signer: signer) {\n        let cake = Cake::make_cake(&signer , 1 * 1000 * 1000 * 1000);\n        Cake::destroy_cake(&signer, cake);\n    }\n}\n// check: EXECUTED\n\n//# run --signers Chef\nscript {\n    use StarcoinFramework::Account;\n    use Chef::Cake;\n    fun send_cake(signer: signer) {\n        let cake = Cake::make_cake(&signer , 1 * 1000 * 1000 * 1000);\n        Cake::send_cake(@guest, cake);\n        assert!( Account::balance<Cake::Cake>(@guest) == 1 * 1000 * 1000 * 1000 , 1001);\n    }\n}\n// check: EXECUTED\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8fd0\u884c\u96c6\u6210\u6d4b\u8bd5  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mpm integration-test\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u547d\u4ee4\u884c\u4e2d\u5c06\u8f93\u51fa\u5982\u4e0b\u7ed3\u679c")),(0,r.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u5927\u90e8\u5206\u6d4b\u8bd5\u7ed3\u679c\u662f\u7b26\u5408\u9884\u671f\u7684\u3002\u4f46\u662f\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u7684\u7ed3\u679c\u662f\u9519\u8bef\u7684\uff0c\u6211\u4eec\u9700\u8981\u4ed4\u7ec6\u68c0\u67e5\u6700\u540e\u4e00\u9879\u6d4b\u8bd5\u4ee3\u7801\uff0c\u7406\u6e05\u5176\u80cc\u540e\u7684\u903b\u8f91\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'BUILDING StarcoinFramework\nBUILDING MyCake\n\nrunning 1 tests\n\ntest transactional-test::mycake_test.move ... FAILED\nError: Expected errors differ from actual errors:\nprocessed 7 tasks\n\ntask 3 \'run\'. lines 7-14:\n{\n  "gas_used": 97115,\n  "status": {\n    "Keep": "Executed"\n  }\n}\n\ntask 4 \'run\'. lines 16-26:\n{\n  "gas_used": 128354,\n  "status": {\n    "Keep": "Executed"\n  }\n}\n\ntask 5 \'run\'. lines 28-36:\n{\n  "gas_used": 90747,\n  "status": {\n    "Keep": "Executed"\n  }\n}\n\ntask 6 \'run\'. lines 38-48:\n{\n  "gas_used": 90471,\n  "status": {\n    "Keep": {\n      "MoveAbort": [\n        "Script",\n        1001\n      ]\n    }\n  }\n}\n\n\n\nfailures:\n    transactional-test::mycake_test.move\n\ntest result: FAILED. 0 passed; 1 failed; 0 filtered out\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u95ee\u9898\u5206\u6790  ")),(0,r.kt)("p",null,"\u9996\u5148\u770b\u4e00\u4e0b\u4ee3\u7801\uff0c\u6211\u4eec\u83b7\u53d6\u4e86\u4e00\u4e9b cake \u4ee3\u5e01\uff0c\u7136\u540e\u60f3\u53d1\u9001\u7ed9 guest \u8d26\u6237\uff1b\u4f46\u662f\u6267\u884c send_cake \u540e\uff0cguest \u8d26\u6237\u91cc\u5e76\u6ca1\u6709\u6536\u5230 cake \u4ee3\u5e01\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//# run --signers Chef\nscript {\n    use StarcoinFramework::Account;\n    use Chef::Cake;\n    fun send_cake(signer: signer) {\n        let cake = Cake::make_cake(&signer , 1 * 1000 * 1000 * 1000);\n        Cake::send_cake(@guest, cake);\n        assert!( Account::balance<Cake::Cake>(@guest) == 1 * 1000 * 1000 * 1000 , 1001);\n    }\n}\n// check: EXECUTED\n")),(0,r.kt)("p",null,"\u901a\u8fc7\u4e0a\u9762\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u6211\u4eec\u77e5\u9053 make_cake \u51fd\u6570\u662f\u6b63\u5e38\u7684\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u90a3\u4e48\u95ee\u9898\u4e00\u5b9a\u51fa\u5728 send_cake \u4e0a\u9762"),"\u3002"),(0,r.kt)("p",null,"\u6211\u4eec\u5c31\u6765\u68c0\u67e5\u4e00\u4e0b\u5427\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    public fun send_cake( _to :address , cake: Token::Token<Cake> ){\n        Account::deposit<Cake>(@Chef, cake);\n    }\n")),(0,r.kt)("p",null,"\u4ed4\u7ec6\u67e5\u770b send_cake \u51fd\u6570\uff0c\u53ef\u4ee5\u770b\u5230 Account::deposit<Cake",">","(@Chef, cake) \u7684\u53c2\u6570\u9519\u8bef\u5199\u6210\u4e86\u7ba1\u7406\u5458\u7684\u5730\u5740\uff0c\u800c\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u63a5\u53d7\u4ee3\u5e01\u7684\u8d26\u6237\u5730\u5740\u3002"),(0,r.kt)("p",null,"\u4fee\u590d\u8be5\u95ee\u9898\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    public fun send_cake( to :address , cake: Token::Token<Cake> ){\n        Account::deposit<Cake>(to, cake);\n    }\n")),(0,r.kt)("p",null,"\u597d\u4e86\uff0c\u6211\u4eec\u91cd\u65b0\u8fd0\u884c integration-test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mpm integration-test\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8fd9\u4e0b\u6d4b\u8bd5\u9879\u4e2d\u6ca1\u6709\u51fa\u73b0\u9519\u8bef\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u7684\u6d4b\u8bd5\u7ed3\u679c\u4ecd\u7136\u5931\u8d25\u4e86\u3002\u8fd9\u53c8\u662f\u4ec0\u4e48\u539f\u56e0\uff1f")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'BUILDING StarcoinFramework\nBUILDING MyCake\n\nrunning 1 tests\n\ntest transactional-test::mycake_test.move ... FAILED\nError: Expected errors differ from actual errors:\nprocessed 7 tasks\n\ntask 3 \'run\'. lines 7-14:\n{\n  "gas_used": 97115,\n  "status": {\n    "Keep": "Executed"\n  }\n}\n\ntask 4 \'run\'. lines 16-26:\n{\n  "gas_used": 128354,\n  "status": {\n    "Keep": "Executed"\n  }\n}\n\ntask 5 \'run\'. lines 28-36:\n{\n  "gas_used": 90747,\n  "status": {\n    "Keep": "Executed"\n  }\n}\n\ntask 6 \'run\'. lines 38-48:\n{\n  "gas_used": 141989,\n  "status": {\n    "Keep": "Executed"\n  }\n}\n\n\n\nfailures:\n    transactional-test::mycake_test.move\n\ntest result: FAILED. 0 passed; 1 failed; 0 filtered out\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u66f4\u65b0\u6d4b\u8bd5\u57fa\u51c6")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6d4b\u8bd5\u57fa\u51c6")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mpm integration-test --ub\n")),(0,r.kt)("p",null,"\u8be5\u547d\u4ee4\u4f1a\u5728 integration-tests \u76ee\u5f55\u4e0b\u751f\u6210\u548c\u6d4b\u8bd5\u6587\u4ef6\u540c\u540d\uff0c\u540e\u7f00\u4e3a exp \u7684\u6587\u4ef6\u3002\u547d\u4ee4\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u6240\u6709\u6d4b\u8bd5\u901a\u8fc7\uff01"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"BUILDING StarcoinFramework\nBUILDING MyCake\n\nrunning 1 tests\n\ntest transactional-test::mycake_test.move ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 filtered out\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},'\u5f53\u4fee\u6539\u6d4b\u8bd5\u9879\u540e\uff0c\u8bb0\u5f97\u4e00\u5b9a\u8981\u5728\u5728\u6d4b\u8bd5\u547d\u4ee4\u4e2d\u52a0\u4e0a "--ub" \u9009\u9879\uff1a',(0,r.kt)("inlineCode",{parentName:"strong"},"mpm integration-test --ub"),"\u3002")),(0,r.kt)("h3",{id:"\u6b63\u786e\u4ee3\u7801"},"\u6b63\u786e\u4ee3\u7801"),(0,r.kt)("h4",{id:"movetoml"},"Move.toml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[package]\nname = "MyCake"\nversion = "0.0.0"\n\n[addresses]\nChef = "0xf2aa2eae4ceaae88b308fc904975e4ae"\n\n[dependencies]\nStarcoinFramework = { git = "https://github.com/starcoinorg/starcoin-framework.git", rev = "01c84198819310620f2417413c3c800df8292ae5" }\n\n')),(0,r.kt)("h4",{id:"mycakemove"},"mycake.move"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"address Chef{\n    module Cake{\n        use StarcoinFramework::Signer;\n        use StarcoinFramework::Token;\n        use StarcoinFramework::Account;\n\n        struct Cake has copy, drop, store { }\n\n        public fun admin():address{\n            @Chef\n        }\n\n        public fun init(account :&signer){\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::register_token<Cake>( account, 9 );\n        }\n\n        public fun make_cake( account: &signer , amount : u128): Token::Token<Cake> {\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::mint<Cake>( account , amount  )\n        }\n\n        public fun destroy_cake( account: &signer , cake: Token::Token<Cake>) {\n            assert!( admin() == Signer::address_of( account ) , 10000);\n            Token::burn<Cake>( account , cake  );\n        }\n\n        public fun send_cake( to :address , cake: Token::Token<Cake> ){\n            Account::deposit<Cake>(to, cake);\n        }\n\n        public fun add (x:u128, y:u128 ):u128{\n            x + y\n        }\n\n        #[test]\n        public fun add_test(){\n            assert!( add(10 , 1) == 11, 101);\n        }\n    }\n}\n\n")),(0,r.kt)("h4",{id:"mycake_testmove"},"mycake_test.move"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//# init -n test --public-keys Chef=0x98826ab91a9a5d85dec536418090aa6342991bc8f947613721c8165e7102b132 \n\n//# faucet --addr Chef --amount 10000000000000000\n\n//# faucet --addr guest --amount 10000000000000000\n\n//# run --signers Chef\nscript {\n    use Chef::Cake;\n    fun init(signer: signer) {\n        Cake::init(&signer);\n    }\n}\n// check: EXECUTED\n\n//# run --signers Chef\nscript {\n    use StarcoinFramework::Signer;\n    use StarcoinFramework::Account;\n    use Chef::Cake;\n    fun make_cake(signer: signer) {\n        let cake = Cake::make_cake(&signer , 1 * 1000 * 1000 * 1000);\n        Account::deposit<Cake::Cake>( Signer::address_of(&signer) , cake );\n    }\n}\n// check: EXECUTED\n\n//# run --signers Chef\nscript {\n    use Chef::Cake;\n    fun destroy_cake(signer: signer) {\n        let cake = Cake::make_cake(&signer , 1 * 1000 * 1000 * 1000);\n        Cake::destroy_cake(&signer, cake);\n    }\n}\n// check: EXECUTED\n\n//# run --signers Chef\nscript {\n    use StarcoinFramework::Account;\n    use Chef::Cake;\n    fun send_cake(signer: signer) {\n        let cake = Cake::make_cake(&signer , 1 * 1000 * 1000 * 1000);\n        Cake::send_cake(@guest, cake);\n        assert!( Account::balance<Cake::Cake>(@guest) == 1 * 1000 * 1000 * 1000 , 1001);\n    }\n}\n// check: EXECUTED\n")))}l.isMDXComponent=!0}}]);